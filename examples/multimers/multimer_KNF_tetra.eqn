# Facile model created by Allosteric Network Compiler (ANC)
# ANC version 1.01 released 2011/08/26
# Thu Aug 25 00:35:04 EDT 2011



# PARAMETERS
# ----------
parameter k_TR = 1
parameter k_RT = 100
parameter Gamma = 10
parameter Phi_TR = 0.2
parameter kf_T = 1
parameter kb_T = 10
parameter kf_R = 10
parameter kb_R = 1


# REACTION CLASS: BindingReaction
# -------------------------------
HRRRR                + L                    <-> HRRRR_Li00                      ; fb00=kf_R; bb00=kb_R           # (R!32) Kd = kb_R/kf_R
HRRRR                + L                     -> HRRRR_Li00                      ; fb00=kf_R                      # (R!34) Kd = UNDEFINED
HRRRR                + L                     -> HRRRR_Li00                      ; fb00=kf_R                      # (R!33) Kd = UNDEFINED
HRRRR                + L                     -> HRRRR_Li00                      ; fb00=kf_R                      # (R!35) Kd = UNDEFINED
HRRRT                + L                    <-> HRRRT_Li00                      ; fb00=kf_R; bb00=kb_R           # (R!28) Kd = kb_R/kf_R
HRRRT                + L                     -> HRRRT_Li00                      ; fb00=kf_R                      # (R!29) Kd = UNDEFINED
HRRRT                + L                     -> HRRRT_Li00                      ; fb00=kf_R                      # (R!30) Kd = UNDEFINED
HRRRT                + L                    <-> HTRRR_Li00                      ; fb01=kf_T; bb01=kb_T           # (R!31) Kd = kb_T/kf_T
HRRTT                + L                    <-> HRRTT_Li00                      ; fb00=kf_R; bb00=kb_R           # (R!24) Kd = kb_R/kf_R
HRRTT                + L                     -> HRRTT_Li00                      ; fb00=kf_R                      # (R!25) Kd = UNDEFINED
HRRTT                + L                    <-> HTRRT_Li00                      ; fb01=kf_T; bb01=kb_T           # (R!26) Kd = kb_T/kf_T
HRRTT                + L                     -> HTRRT_Li00                      ; fb01=kf_T                      # (R!27) Kd = UNDEFINED
HRTTT                + L                    <-> HRTTT_Li00                      ; fb00=kf_R; bb00=kb_R           # (R!20) Kd = kb_R/kf_R
HRTTT                + L                    <-> HTRTT_Li00                      ; fb01=kf_T; bb01=kb_T           # (R!21) Kd = kb_T/kf_T
HRTTT                + L                     -> HTRTT_Li00                      ; fb01=kf_T                      # (R!22) Kd = UNDEFINED
HRTTT                + L                     -> HTRTT_Li00                      ; fb01=kf_T                      # (R!23) Kd = UNDEFINED
HTTTT                + L                    <-> HTTTT_Li00                      ; fb01=kf_T; bb01=kb_T           # (R!16) Kd = kb_T/kf_T
HTTTT                + L                     -> HTTTT_Li00                      ; fb01=kf_T                      # (R!18) Kd = UNDEFINED
HTTTT                + L                     -> HTTTT_Li00                      ; fb01=kf_T                      # (R!17) Kd = UNDEFINED
HTTTT                + L                     -> HTTTT_Li00                      ; fb01=kf_T                      # (R!19) Kd = UNDEFINED
L                    + HRRRR_Li00           <-> HRRRR_L_Li00                    ; fb00=kf_R; bb00=kb_R           # (R!79) Kd = kb_R/kf_R
L                    + HRRRR_Li00            -> HRRRR_L_Li00                    ; fb00=kf_R                      # (R!80) Kd = UNDEFINED
L                    + HRRRR_Li00            -> HRRRR_L_Li00                    ; fb00=kf_R                      # (R!81) Kd = UNDEFINED
L                    + HRRRR_Li00           <-  HRRRR_L_Li00                    ; bb00=kb_R                      # (R!110) Kd = UNDEFINED
L                    + HRRRT_Li00           <-> HRRRT_L_Li00                    ; fb00=kf_R; bb00=kb_R           # (R!73) Kd = kb_R/kf_R
L                    + HRRRT_Li00            -> HRRRT_L_Li00                    ; fb00=kf_R                      # (R!74) Kd = UNDEFINED
L                    + HRRRT_Li00           <-  HRRRT_L_Li00                    ; bb00=kb_R                      # (R!105) Kd = UNDEFINED
L                    + HRRRT_Li00           <-> HRTRR_L_Li00                    ; fb01=kf_T; bb01=kb_T           # (R!75) Kd = kb_T/kf_T
L                    + HRRTT_Li00           <-> HRRTT_L_Li00                    ; fb00=kf_R; bb00=kb_R           # (R!67) Kd = kb_R/kf_R
L                    + HRRTT_Li00           <-  HRRTT_L_Li00                    ; bb00=kb_R                      # (R!95) Kd = UNDEFINED
L                    + HRRTT_Li00           <-> HRTRT_L_Li00                    ; fb01=kf_T; bb01=kb_T           # (R!68) Kd = kb_T/kf_T
L                    + HRRTT_Li00            -> HRTRT_L_Li00                    ; fb01=kf_T                      # (R!69) Kd = UNDEFINED
L                    + HRTTT_Li00           <-> HRTTT_L_Li00                    ; fb01=kf_T; bb01=kb_T           # (R!61) Kd = kb_T/kf_T
L                    + HRTTT_Li00            -> HRTTT_L_Li00                    ; fb01=kf_T                      # (R!62) Kd = UNDEFINED
L                    + HRTTT_Li00            -> HRTTT_L_Li00                    ; fb01=kf_T                      # (R!63) Kd = UNDEFINED
L                    + HTRRR_Li00           <-> HRTRR_L_Li00                    ; fb00=kf_R; bb00=kb_R           # (R!76) Kd = kb_R/kf_R
L                    + HTRRR_Li00            -> HRTRR_L_Li00                    ; fb00=kf_R                      # (R!77) Kd = UNDEFINED
L                    + HTRRR_Li00            -> HRTRR_L_Li00                    ; fb00=kf_R                      # (R!78) Kd = UNDEFINED
L                    + HTRRT_Li00           <-> HRTRT_L_Li00                    ; fb00=kf_R; bb00=kb_R           # (R!70) Kd = kb_R/kf_R
L                    + HTRRT_Li00            -> HRTRT_L_Li00                    ; fb00=kf_R                      # (R!71) Kd = UNDEFINED
L                    + HTRRT_Li00           <-> HTTRR_L_Li00                    ; fb01=kf_T; bb01=kb_T           # (R!72) Kd = kb_T/kf_T
L                    + HTRRT_Li00           <-  HTTRR_L_Li00                    ; bb01=kb_T                      # (R!101) Kd = UNDEFINED
L                    + HTRTT_Li00           <-> HRTTT_L_Li00                    ; fb00=kf_R; bb00=kb_R           # (R!64) Kd = kb_R/kf_R
L                    + HTRTT_Li00           <-> HTTRT_L_Li00                    ; fb01=kf_T; bb01=kb_T           # (R!65) Kd = kb_T/kf_T
L                    + HTRTT_Li00            -> HTTRT_L_Li00                    ; fb01=kf_T                      # (R!66) Kd = UNDEFINED
L                    + HTRTT_Li00           <-  HTTRT_L_Li00                    ; bb01=kb_T                      # (R!91) Kd = UNDEFINED
L                    + HTTTT_Li00           <-> HTTTT_L_Li00                    ; fb01=kf_T; bb01=kb_T           # (R!58) Kd = kb_T/kf_T
L                    + HTTTT_Li00            -> HTTTT_L_Li00                    ; fb01=kf_T                      # (R!59) Kd = UNDEFINED
L                    + HTTTT_Li00            -> HTTTT_L_Li00                    ; fb01=kf_T                      # (R!60) Kd = UNDEFINED
L                    + HTTTT_Li00           <-  HTTTT_L_Li00                    ; bb01=kb_T                      # (R!83) Kd = UNDEFINED
L                    + HRRRR_L_Li00         <-> HRRRR_L_L_Li00                  ; fb00=kf_R; bb00=kb_R           # (R!128) Kd = kb_R/kf_R
L                    + HRRRR_L_Li00          -> HRRRR_L_L_Li00                  ; fb00=kf_R                      # (R!129) Kd = UNDEFINED
L                    + HRRRR_L_Li00         <-  HRRRR_L_L_Li00                  ; bb00=kb_R                      # (R!160) Kd = UNDEFINED
L                    + HRRRR_L_Li00         <-  HRRRR_L_L_Li00                  ; bb00=kb_R                      # (R!162) Kd = UNDEFINED
L                    + HRRRT_L_Li00         <-> HRRRT_L_L_Li00                  ; fb00=kf_R; bb00=kb_R           # (R!124) Kd = kb_R/kf_R
L                    + HRRRT_L_Li00         <-  HRRRT_L_L_Li00                  ; bb00=kb_R                      # (R!152) Kd = UNDEFINED
L                    + HRRRT_L_Li00         <-  HRRRT_L_L_Li00                  ; bb00=kb_R                      # (R!154) Kd = UNDEFINED
L                    + HRRRT_L_Li00         <-> HRRTR_L_L_Li00                  ; fb01=kf_T; bb01=kb_T           # (R!125) Kd = kb_T/kf_T
L                    + HRRTT_L_Li00         <-> HRRTT_L_L_Li00                  ; fb01=kf_T; bb01=kb_T           # (R!118) Kd = kb_T/kf_T
L                    + HRRTT_L_Li00          -> HRRTT_L_L_Li00                  ; fb01=kf_T                      # (R!119) Kd = UNDEFINED
L                    + HRTRR_L_Li00         <-> HRRTR_L_L_Li00                  ; fb00=kf_R; bb00=kb_R           # (R!126) Kd = kb_R/kf_R
L                    + HRTRR_L_Li00          -> HRRTR_L_L_Li00                  ; fb00=kf_R                      # (R!127) Kd = UNDEFINED
L                    + HRTRR_L_Li00         <-  HRRTR_L_L_Li00                  ; bb00=kb_R                      # (R!158) Kd = UNDEFINED
L                    + HRTRT_L_Li00         <-> HRRTT_L_L_Li00                  ; fb00=kf_R; bb00=kb_R           # (R!120) Kd = kb_R/kf_R
L                    + HRTRT_L_Li00         <-  HRRTT_L_L_Li00                  ; bb00=kb_R                      # (R!146) Kd = UNDEFINED
L                    + HRTRT_L_Li00         <-> HRTTR_L_L_Li00                  ; fb01=kf_T; bb01=kb_T           # (R!121) Kd = kb_T/kf_T
L                    + HRTRT_L_Li00         <-  HRTTR_L_L_Li00                  ; bb01=kb_T                      # (R!149) Kd = UNDEFINED
L                    + HRTTT_L_Li00         <-> HRTTT_L_L_Li00                  ; fb01=kf_T; bb01=kb_T           # (R!114) Kd = kb_T/kf_T
L                    + HRTTT_L_Li00          -> HRTTT_L_L_Li00                  ; fb01=kf_T                      # (R!115) Kd = UNDEFINED
L                    + HRTTT_L_Li00         <-  HRTTT_L_L_Li00                  ; bb01=kb_T                      # (R!136) Kd = UNDEFINED
L                    + HTTRR_L_Li00         <-> HRTTR_L_L_Li00                  ; fb00=kf_R; bb00=kb_R           # (R!122) Kd = kb_R/kf_R
L                    + HTTRR_L_Li00          -> HRTTR_L_L_Li00                  ; fb00=kf_R                      # (R!123) Kd = UNDEFINED
L                    + HTTRT_L_Li00         <-> HRTTT_L_L_Li00                  ; fb00=kf_R; bb00=kb_R           # (R!116) Kd = kb_R/kf_R
L                    + HTTRT_L_Li00         <-> HTTTR_L_L_Li00                  ; fb01=kf_T; bb01=kb_T           # (R!117) Kd = kb_T/kf_T
L                    + HTTRT_L_Li00         <-  HTTTR_L_L_Li00                  ; bb01=kb_T                      # (R!140) Kd = UNDEFINED
L                    + HTTRT_L_Li00         <-  HTTTR_L_L_Li00                  ; bb01=kb_T                      # (R!142) Kd = UNDEFINED
L                    + HTTTT_L_Li00         <-> HTTTT_L_L_Li00                  ; fb01=kf_T; bb01=kb_T           # (R!112) Kd = kb_T/kf_T
L                    + HTTTT_L_Li00          -> HTTTT_L_L_Li00                  ; fb01=kf_T                      # (R!113) Kd = UNDEFINED
L                    + HTTTT_L_Li00         <-  HTTTT_L_L_Li00                  ; bb01=kb_T                      # (R!130) Kd = UNDEFINED
L                    + HTTTT_L_Li00         <-  HTTTT_L_L_Li00                  ; bb01=kb_T                      # (R!132) Kd = UNDEFINED
L                    + HRRRR_L_L_Li00       <-> HRRRR_L_L_L_Li00                ; fb00=kf_R; bb00=kb_R           # (R!171) Kd = kb_R/kf_R
L                    + HRRRR_L_L_Li00       <-  HRRRR_L_L_L_Li00                ; bb00=kb_R                      # (R!194) Kd = UNDEFINED
L                    + HRRRR_L_L_Li00       <-  HRRRR_L_L_L_Li00                ; bb00=kb_R                      # (R!195) Kd = UNDEFINED
L                    + HRRRR_L_L_Li00       <-  HRRRR_L_L_L_Li00                ; bb00=kb_R                      # (R!197) Kd = UNDEFINED
L                    + HRRRT_L_L_Li00       <-> HRRRT_L_L_L_Li00                ; fb01=kf_T; bb01=kb_T           # (R!169) Kd = kb_T/kf_T
L                    + HRRTR_L_L_Li00       <-> HRRRT_L_L_L_Li00                ; fb00=kf_R; bb00=kb_R           # (R!170) Kd = kb_R/kf_R
L                    + HRRTR_L_L_Li00       <-  HRRRT_L_L_L_Li00                ; bb00=kb_R                      # (R!189) Kd = UNDEFINED
L                    + HRRTR_L_L_Li00       <-  HRRRT_L_L_L_Li00                ; bb00=kb_R                      # (R!191) Kd = UNDEFINED
L                    + HRRTT_L_L_Li00       <-> HRRTT_L_L_L_Li00                ; fb01=kf_T; bb01=kb_T           # (R!167) Kd = kb_T/kf_T
L                    + HRRTT_L_L_Li00       <-  HRRTT_L_L_L_Li00                ; bb01=kb_T                      # (R!184) Kd = UNDEFINED
L                    + HRTTR_L_L_Li00       <-> HRRTT_L_L_L_Li00                ; fb00=kf_R; bb00=kb_R           # (R!168) Kd = kb_R/kf_R
L                    + HRTTR_L_L_Li00       <-  HRRTT_L_L_L_Li00                ; bb00=kb_R                      # (R!186) Kd = UNDEFINED
L                    + HRTTT_L_L_Li00       <-> HRTTT_L_L_L_Li00                ; fb01=kf_T; bb01=kb_T           # (R!165) Kd = kb_T/kf_T
L                    + HRTTT_L_L_Li00       <-  HRTTT_L_L_L_Li00                ; bb01=kb_T                      # (R!179) Kd = UNDEFINED
L                    + HRTTT_L_L_Li00       <-  HRTTT_L_L_L_Li00                ; bb01=kb_T                      # (R!180) Kd = UNDEFINED
L                    + HTTTR_L_L_Li00       <-> HRTTT_L_L_L_Li00                ; fb00=kf_R; bb00=kb_R           # (R!166) Kd = kb_R/kf_R
L                    + HTTTT_L_L_Li00       <-> HTTTT_L_L_L_Li00                ; fb01=kf_T; bb01=kb_T           # (R!164) Kd = kb_T/kf_T
L                    + HTTTT_L_L_Li00       <-  HTTTT_L_L_L_Li00                ; bb01=kb_T                      # (R!172) Kd = UNDEFINED
L                    + HTTTT_L_L_Li00       <-  HTTTT_L_L_L_Li00                ; bb01=kb_T                      # (R!173) Kd = UNDEFINED
L                    + HTTTT_L_L_Li00       <-  HTTTT_L_L_L_Li00                ; bb01=kb_T                      # (R!175) Kd = UNDEFINED

# REACTION CLASS: AllostericReaction
# ----------------------------------
HRRRR                                        -> HRRRT                           ; fu00=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!13) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR))
HRRRR                                        -> HRRRT                           ; fu00=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!14) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR))
HRRRR                                        -> HRRRT                           ; fu00=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!15) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR))
HRRRT                                       <-> HRRRR                           ; fu01=k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu01=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!12) Keq = (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRRRT                                        -> HRRTT                           ; fu02=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!10) Keq = (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR))
HRRRT                                        -> HRRTT                           ; fu02=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!11) Keq = (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR))
HRRTT                                       <-> HRRRT                           ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR); bu03=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!08) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRRTT                                        -> HRRRT                           ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR) # (R!09) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRRTT                                        -> HRTTT                           ; fu04=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!07) Keq = (k_RT * (Gamma ^ (Phi_TR - 1))) / (k_TR * Gamma ^ Phi_TR)
HRTTT                                       <-> HRRTT                           ; fu05=k_TR * Gamma ^ Phi_TR; bu05=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!04) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HRTTT                                        -> HRRTT                           ; fu05=k_TR * Gamma ^ Phi_TR     # (R!05) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HRTTT                                        -> HRRTT                           ; fu05=k_TR * Gamma ^ Phi_TR     # (R!06) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HTTTT                                       <-> HRTTT                           ; fu06=k_TR; bu06=k_RT           # (R!00) Keq = k_TR / k_RT
HTTTT                                        -> HRTTT                           ; fu06=k_TR                      # (R!02) Keq = k_TR / k_RT
HTTTT                                        -> HRTTT                           ; fu06=k_TR                      # (R!01) Keq = k_TR / k_RT
HTTTT                                        -> HRTTT                           ; fu06=k_TR                      # (R!03) Keq = k_TR / k_RT
HRRRR_Li00                                   -> HRRRT_Li00                      ; fu00=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!56) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR))
HRRRR_Li00                                   -> HRRRT_Li00                      ; fu00=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!57) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR))
HRRRT_Li00                                  <-> HRRRR_Li00                      ; fu01=k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu01=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!52) Keq = (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRRRT_Li00                                   -> HRRTT_Li00                      ; fu02=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!51) Keq = (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR))
HRRTT_Li00                                  <-> HRRRT_Li00                      ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR); bu03=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!46) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRRTT_Li00                                   -> HRRRT_Li00                      ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR) # (R!47) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRTTT_Li00                                  <-> HRRTT_Li00                      ; fu05=k_TR * Gamma ^ Phi_TR; bu05=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!40) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HRTTT_Li00                                   -> HRRTT_Li00                      ; fu05=k_TR * Gamma ^ Phi_TR     # (R!42) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HRTTT_Li00                                   -> HRRTT_Li00                      ; fu05=k_TR * Gamma ^ Phi_TR     # (R!41) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HTRRR_Li00                                  <-> HRRRR_Li00                      ; fu07=k_TR * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu07=k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!53) Keq = (k_TR * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HTRRR_Li00                                   -> HTRRT_Li00                      ; fu02=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!54) Keq = (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR))
HTRRR_Li00                                   -> HTRRT_Li00                      ; fu02=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!55) Keq = (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR))
HTRRT_Li00                                  <-> HRRRT_Li00                      ; fu08=k_TR * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu08=k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!48) Keq = (k_TR * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HTRRT_Li00                                  <-> HTRRR_Li00                      ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR); bu03=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!50) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HTRRT_Li00                                   -> HTRTT_Li00                      ; fu04=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!49) Keq = (k_RT * (Gamma ^ (Phi_TR - 1))) / (k_TR * Gamma ^ Phi_TR)
HTRTT_Li00                                  <-> HRRTT_Li00                      ; fu09=k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR); bu09=k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!43) Keq = (k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HTRTT_Li00                                  <-> HTRRT_Li00                      ; fu05=k_TR * Gamma ^ Phi_TR; bu05=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!44) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HTRTT_Li00                                   -> HTRRT_Li00                      ; fu05=k_TR * Gamma ^ Phi_TR     # (R!45) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HTTTT_Li00                                  <-> HRTTT_Li00                      ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR); bu10=k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) # (R!36) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_Li00                                  <-> HTRTT_Li00                      ; fu06=k_TR; bu06=k_RT           # (R!37) Keq = k_TR / k_RT
HTTTT_Li00                                   -> HTRTT_Li00                      ; fu06=k_TR                      # (R!38) Keq = k_TR / k_RT
HTTTT_Li00                                   -> HTRTT_Li00                      ; fu06=k_TR                      # (R!39) Keq = k_TR / k_RT
HRRRR_L_Li00                                 -> HRRRT_L_Li00                    ; fu00=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!111) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR))
HRRRR_L_Li00                                 -> HRTRR_L_Li00                    ; fu11=k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!109) Keq = (k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR))
HRRRT_L_Li00                                <-> HRRRR_L_Li00                    ; fu01=k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu01=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!106) Keq = (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRRRT_L_Li00                                 -> HRTRT_L_Li00                    ; fu12=k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!104) Keq = (k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR))
HRRTT_L_Li00                                <-> HRRRT_L_Li00                    ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR); bu03=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!96) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRRTT_L_Li00                                 -> HRRRT_L_Li00                    ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR) # (R!97) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRRTT_L_Li00                                 -> HRTTT_L_Li00                    ; fu13=k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!94) Keq = (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRTRR_L_Li00                                <-> HRRRR_L_Li00                    ; fu14=k_TR * (((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu14=k_RT * ((((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!107) Keq = (k_TR * (((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRTRR_L_Li00                                 -> HRTRT_L_Li00                    ; fu02=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!108) Keq = (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR))
HRTRT_L_Li00                                <-> HRRRT_L_Li00                    ; fu15=k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR); bu15=k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!98) Keq = (k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR)) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRTRT_L_Li00                                <-> HRTRR_L_Li00                    ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR); bu03=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!99) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRTTT_L_Li00                                <-> HRRTT_L_Li00                    ; fu16=k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)); bu16=k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) # (R!87) Keq = (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRTTT_L_Li00                                <-> HRTRT_L_Li00                    ; fu05=k_TR * Gamma ^ Phi_TR; bu05=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!88) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HRTTT_L_Li00                                 -> HRTRT_L_Li00                    ; fu05=k_TR * Gamma ^ Phi_TR     # (R!89) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HTTRR_L_Li00                                <-> HRTRR_L_Li00                    ; fu08=k_TR * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu08=k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!100) Keq = (k_TR * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HTTRR_L_Li00                                 -> HRTRR_L_Li00                    ; fu08=k_TR * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) # (R!102) Keq = (k_TR * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HTTRR_L_Li00                                 -> HTTRT_L_Li00                    ; fu04=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!103) Keq = (k_RT * (Gamma ^ (Phi_TR - 1))) / (k_TR * Gamma ^ Phi_TR)
HTTRT_L_Li00                                <-> HRTRT_L_Li00                    ; fu09=k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR); bu09=k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!90) Keq = (k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HTTRT_L_Li00                                 -> HRTRT_L_Li00                    ; fu09=k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) # (R!92) Keq = (k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HTTRT_L_Li00                                <-> HTTRR_L_Li00                    ; fu05=k_TR * Gamma ^ Phi_TR; bu05=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!93) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HTTTT_L_Li00                                <-> HRTTT_L_Li00                    ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR); bu10=k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) # (R!82) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_Li00                                 -> HRTTT_L_Li00                    ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) # (R!84) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_Li00                                <-> HTTRT_L_Li00                    ; fu06=k_TR; bu06=k_RT           # (R!85) Keq = k_TR / k_RT
HTTTT_L_Li00                                 -> HTTRT_L_Li00                    ; fu06=k_TR                      # (R!86) Keq = k_TR / k_RT
HRRRR_L_L_Li00                               -> HRRTR_L_L_Li00                  ; fu11=k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!161) Keq = (k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR))
HRRRR_L_L_Li00                               -> HRRTR_L_L_Li00                  ; fu17=k_RT * ((((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!163) Keq = (k_RT * ((((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR))
HRRRT_L_L_Li00                              <-> HRRRR_L_L_Li00                  ; fu01=k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR); bu01=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!156) Keq = (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRRRT_L_L_Li00                               -> HRRTT_L_L_Li00                  ; fu12=k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!153) Keq = (k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRRRT_L_L_Li00                               -> HRRTT_L_L_Li00                  ; fu18=k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!155) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRRTR_L_L_Li00                              <-> HRRRR_L_L_Li00                  ; fu19=k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR); bu19=k_RT * ((((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!159) Keq = (k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR)) / (k_RT * ((((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRRTR_L_L_Li00                               -> HRTTR_L_L_Li00                  ; fu12=k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!157) Keq = (k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR))
HRRTT_L_L_Li00                              <-> HRRRT_L_L_Li00                  ; fu20=k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)); bu20=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) # (R!147) Keq = (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRRTT_L_L_Li00                              <-> HRRTR_L_L_Li00                  ; fu03=k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR); bu03=k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!148) Keq = (k_TR * (Gamma ^ Phi_TR * Gamma ^ Phi_TR)) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HRRTT_L_L_Li00                               -> HRTTT_L_L_Li00                  ; fu13=k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!145) Keq = (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRTTR_L_L_Li00                              <-> HRRTR_L_L_Li00                  ; fu15=k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR); bu15=k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!150) Keq = (k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR)) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRTTR_L_L_Li00                               -> HRRTR_L_L_Li00                  ; fu15=k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR) # (R!151) Keq = (k_TR * ((Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) * Gamma ^ Phi_TR)) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))))
HRTTT_L_L_Li00                              <-> HRRTT_L_L_Li00                  ; fu16=k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)); bu16=k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) # (R!137) Keq = (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRTTT_L_L_Li00                               -> HRRTT_L_L_Li00                  ; fu16=k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) # (R!138) Keq = (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRTTT_L_L_Li00                              <-> HRTTR_L_L_Li00                  ; fu05=k_TR * Gamma ^ Phi_TR; bu05=k_RT * (Gamma ^ (Phi_TR - 1)) # (R!139) Keq = (k_TR * Gamma ^ Phi_TR) / (k_RT * (Gamma ^ (Phi_TR - 1)))
HTTTR_L_L_Li00                              <-> HRTTR_L_L_Li00                  ; fu09=k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR); bu09=k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!141) Keq = (k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HTTTR_L_L_Li00                               -> HRTTR_L_L_Li00                  ; fu09=k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) # (R!143) Keq = (k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HTTTR_L_L_Li00                               -> HRTTR_L_L_Li00                  ; fu09=k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR) # (R!144) Keq = (k_TR * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) * Gamma ^ Phi_TR)) / (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))))
HTTTT_L_L_Li00                              <-> HRTTT_L_L_Li00                  ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR); bu10=k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) # (R!131) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_L_Li00                               -> HRTTT_L_L_Li00                  ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) # (R!133) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_L_Li00                               -> HRTTT_L_L_Li00                  ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) # (R!134) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_L_Li00                              <-> HTTTR_L_L_Li00                  ; fu06=k_TR; bu06=k_RT           # (R!135) Keq = k_TR / k_RT
HRRRR_L_L_L_Li00                             -> HRRRT_L_L_L_Li00                ; fu11=k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!196) Keq = (k_RT * ((((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRRRR_L_L_L_Li00                             -> HRRRT_L_L_L_Li00                ; fu17=k_RT * ((((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!198) Keq = (k_RT * ((((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRRRR_L_L_L_Li00                             -> HRRRT_L_L_L_Li00                ; fu21=k_RT * ((((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!199) Keq = (k_RT * ((((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRRRT_L_L_L_Li00                            <-> HRRRR_L_L_L_Li00                ; fu22=k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)); bu22=k_RT * ((((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) # (R!193) Keq = (k_TR * (((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * ((((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRRRT_L_L_L_Li00                             -> HRRTT_L_L_L_Li00                ; fu12=k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!190) Keq = (k_RT * (((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRRRT_L_L_L_Li00                             -> HRRTT_L_L_L_Li00                ; fu18=k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1))) # (R!192) Keq = (k_RT * (((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRRTT_L_L_L_Li00                            <-> HRRRT_L_L_L_Li00                ; fu20=k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)); bu20=k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) # (R!187) Keq = (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRRTT_L_L_L_Li00                             -> HRRRT_L_L_L_Li00                ; fu20=k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) # (R!188) Keq = (k_TR * ((Gamma ^ Phi_TR * Gamma ^ Phi_TR) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * (((Gamma ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRRTT_L_L_L_Li00                             -> HRTTT_L_L_L_Li00                ; fu13=k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1))) # (R!185) Keq = (k_RT * ((((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) * (Gamma ^ (Phi_TR - 1)))) / (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)))
HRTTT_L_L_L_Li00                            <-> HRRTT_L_L_L_Li00                ; fu16=k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)); bu16=k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))) # (R!181) Keq = (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRTTT_L_L_L_Li00                             -> HRRTT_L_L_L_Li00                ; fu16=k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) # (R!182) Keq = (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HRTTT_L_L_L_Li00                             -> HRRTT_L_L_L_Li00                ; fu16=k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) # (R!183) Keq = (k_TR * (Gamma ^ Phi_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR))) / (k_RT * ((Gamma ^ (Phi_TR - 1)) * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1))))
HTTTT_L_L_L_Li00                            <-> HRTTT_L_L_L_Li00                ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR); bu10=k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)) # (R!174) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_L_L_Li00                             -> HRTTT_L_L_L_Li00                ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) # (R!177) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_L_L_Li00                             -> HRTTT_L_L_L_Li00                ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) # (R!176) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))
HTTTT_L_L_L_Li00                             -> HRTTT_L_L_L_Li00                ; fu10=k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR) # (R!178) Keq = (k_TR * (((kf_R / kb_R) / (kf_T / kb_T)) ^ Phi_TR)) / (k_RT * (((kf_R / kb_R) / (kf_T / kb_T)) ^ (Phi_TR - 1)))


# INITIAL CONCENTRATIONS (compiled from MODEL section)
# ----------------------------------------------------
INIT:
HTTTT = 1


# STIMULI (from Stimulus objects)
# ------------------------------------
EQN:
null -> L; k_source_Stm00_L="(0.01*1000 +(event_flags(1) && ~event_flags(80))*0.00258925411794167*1000+(event_flags(2) && ~event_flags(79))*0.00325967780666946*1000+(event_flags(3) && ~event_flags(78))*0.00410369122507766*1000+(event_flags(4) && ~event_flags(77))*0.00516624116540701*1000+(event_flags(5) && ~event_flags(76))*0.006503912286588*1000+(event_flags(6) && ~event_flags(75))*0.00818794045366594*1000+(event_flags(7) && ~event_flags(74))*0.0103080063073775*1000+(event_flags(8) && ~event_flags(73))*0.0129770110852921*1000+(event_flags(9) && ~event_flags(72))*0.0163370890244088*1000+(event_flags(10) && ~event_flags(71))*0.0205671765275719*1000+(event_flags(11) && ~event_flags(70))*0.0258925411794168*1000+(event_flags(12) && ~event_flags(69))*0.0325967780666946*1000+(event_flags(13) && ~event_flags(68))*0.0410369122507767*1000+(event_flags(14) && ~event_flags(67))*0.0516624116540701*1000+(event_flags(15) && ~event_flags(66))*0.06503912286588*1000+(event_flags(16) && ~event_flags(65))*0.0818794045366594*1000+(event_flags(17) && ~event_flags(64))*0.103080063073775*1000+(event_flags(18) && ~event_flags(63))*0.129770110852921*1000+(event_flags(19) && ~event_flags(62))*0.163370890244088*1000+(event_flags(20) && ~event_flags(61))*0.205671765275719*1000+(event_flags(21) && ~event_flags(60))*0.258925411794168*1000+(event_flags(22) && ~event_flags(59))*0.325967780666947*1000+(event_flags(23) && ~event_flags(58))*0.410369122507767*1000+(event_flags(24) && ~event_flags(57))*0.516624116540702*1000+(event_flags(25) && ~event_flags(56))*0.6503912286588*1000+(event_flags(26) && ~event_flags(55))*0.818794045366595*1000+(event_flags(27) && ~event_flags(54))*1.03080063073775*1000+(event_flags(28) && ~event_flags(53))*1.29770110852921*1000+(event_flags(29) && ~event_flags(52))*1.63370890244089*1000+(event_flags(30) && ~event_flags(51))*2.05671765275719*1000+(event_flags(31) && ~event_flags(50))*2.58925411794168*1000+(event_flags(32) && ~event_flags(49))*3.25967780666947*1000+(event_flags(33) && ~event_flags(48))*4.10369122507767*1000+(event_flags(34) && ~event_flags(47))*5.16624116540702*1000+(event_flags(35) && ~event_flags(46))*6.50391228658801*1000+(event_flags(36) && ~event_flags(45))*8.18794045366595*1000+(event_flags(37) && ~event_flags(44))*10.3080063073775*1000+(event_flags(38) && ~event_flags(43))*12.9770110852921*1000+(event_flags(39) && ~event_flags(42))*16.3370890244089*1000+(event_flags(40) && ~event_flags(41))*20.5671765275719*1000)"
L -> null; k_sink_Stm00_L=1000

CONFIG:
ode_event_times = ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
t_final = 10000


# COMPILED PROBES (from Probe objects)
# ------------------------------------
PROBE:
probe p_R0 = "HTTTT + HTTTT_Li00 + HTTTT_L_Li00 + HTTTT_L_L_Li00 + HTTTT_L_L_L_Li00"
probe p_R1 = "HRTTT + HRTTT_Li00 + HTRTT_Li00 + HRTTT_L_Li00 + HTTRT_L_Li00 + HRTTT_L_L_Li00 + HTTTR_L_L_Li00 + HRTTT_L_L_L_Li00"
probe p_R2 = "HRRTT + HRRTT_Li00 + HTRRT_Li00 + HRRTT_L_Li00 + HRTRT_L_Li00 + HTTRR_L_Li00 + HRRTT_L_L_Li00 + HRTTR_L_L_Li00 + HRRTT_L_L_L_Li00"
probe p_R3 = "HRRRT + HRRRT_Li00 + HTRRR_Li00 + HRRRT_L_Li00 + HRTRR_L_Li00 + HRRRT_L_L_Li00 + HRRTR_L_L_Li00 + HRRRT_L_L_L_Li00"
probe p_R4 = "HRRRR + HRRRR_Li00 + HRRRR_L_Li00 + HRRRR_L_L_Li00 + HRRRR_L_L_L_Li00"
probe L
probe p_L0 = "HTTTT + HRTTT + HRRTT + HRRRT + HRRRR"
probe p_L1 = "HTTTT_Li00 + HRTTT_Li00 + HTRTT_Li00 + HRRTT_Li00 + HTRRT_Li00 + HRRRT_Li00 + HTRRR_Li00 + HRRRR_Li00"
probe p_L2 = "HTTTT_L_Li00 + HRTTT_L_Li00 + HTTRT_L_Li00 + HRRTT_L_Li00 + HRTRT_L_Li00 + HTTRR_L_Li00 + HRRRT_L_Li00 + HRTRR_L_Li00 + HRRRR_L_Li00"
probe p_L3 = "HTTTT_L_L_Li00 + HRTTT_L_L_Li00 + HTTTR_L_L_Li00 + HRRTT_L_L_Li00 + HRTTR_L_L_Li00 + HRRRT_L_L_Li00 + HRRTR_L_L_Li00 + HRRRR_L_L_Li00"
probe p_L4 = "HTTTT_L_L_L_Li00 + HRTTT_L_L_L_Li00 + HRRTT_L_L_L_Li00 + HRRRT_L_L_L_Li00 + HRRRR_L_L_L_Li00"


# CONFIG (from CONFIG section)
# ----------------------------
CONFIG:
t_final = 10000
t_vector = [0:1:tf]
matlab_ode_solver = ode15s
matlab_odeset_options = odeset('InitialStep', 1e-15, 'AbsTol', 1e-48, 'RelTol', 1e-5)
SS_timescale = 100
SS_RelTol = 1e-3
SS_AbsTol = 1e-6
